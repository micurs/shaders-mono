(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))o(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const s of n.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&o(s)}).observe(document,{childList:!0,subtree:!0});function r(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function o(i){if(i.ep)return;i.ep=!0;const n=r(i);fetch(i.href,n)}})();var Yt=Object.defineProperty,jt=(e,t,r)=>t in e?Yt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,A=(e,t,r)=>(jt(e,typeof t!="symbol"?t+"":t,r),r),ut=1e-6,I=typeof Float32Array<"u"?Float32Array:Array;Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)});function Ft(){var e=new I(9);return I!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[5]=0,e[6]=0,e[7]=0),e[0]=1,e[4]=1,e[8]=1,e}function Xt(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function W(){var e=new I(16);return I!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function j(e){var t=new I(16);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function Wt(e,t,r,o,i,n,s,a,c,l,u,h,d,m,v,f){var p=new I(16);return p[0]=e,p[1]=t,p[2]=r,p[3]=o,p[4]=i,p[5]=n,p[6]=s,p[7]=a,p[8]=c,p[9]=l,p[10]=u,p[11]=h,p[12]=d,p[13]=m,p[14]=v,p[15]=f,p}function yt(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function Kt(e,t){if(e===t){var r=t[1],o=t[2],i=t[3],n=t[6],s=t[7],a=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=o,e[9]=n,e[11]=t[14],e[12]=i,e[13]=s,e[14]=a}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function z(e,t){var r=t[0],o=t[1],i=t[2],n=t[3],s=t[4],a=t[5],c=t[6],l=t[7],u=t[8],h=t[9],d=t[10],m=t[11],v=t[12],f=t[13],p=t[14],M=t[15],S=r*a-o*s,y=r*c-i*s,g=r*l-n*s,w=o*c-i*a,b=o*l-n*a,F=i*l-n*c,q=u*f-h*v,R=u*p-d*v,N=u*M-m*v,O=h*p-d*f,Z=h*M-m*f,k=d*M-m*p,C=S*k-y*Z+g*O+w*N-b*R+F*q;return C?(C=1/C,e[0]=(a*k-c*Z+l*O)*C,e[1]=(i*Z-o*k-n*O)*C,e[2]=(f*F-p*b+M*w)*C,e[3]=(d*b-h*F-m*w)*C,e[4]=(c*N-s*k-l*R)*C,e[5]=(r*k-i*N+n*R)*C,e[6]=(p*g-v*F-M*y)*C,e[7]=(u*F-d*g+m*y)*C,e[8]=(s*Z-a*N+l*q)*C,e[9]=(o*N-r*Z-n*q)*C,e[10]=(v*b-f*g+M*S)*C,e[11]=(h*g-u*b-m*S)*C,e[12]=(a*R-s*O-c*q)*C,e[13]=(r*O-o*R+i*q)*C,e[14]=(f*y-v*w-p*S)*C,e[15]=(u*w-h*y+d*S)*C,e):null}function wt(e,t,r){var o=t[0],i=t[1],n=t[2],s=t[3],a=t[4],c=t[5],l=t[6],u=t[7],h=t[8],d=t[9],m=t[10],v=t[11],f=t[12],p=t[13],M=t[14],S=t[15],y=r[0],g=r[1],w=r[2],b=r[3];return e[0]=y*o+g*a+w*h+b*f,e[1]=y*i+g*c+w*d+b*p,e[2]=y*n+g*l+w*m+b*M,e[3]=y*s+g*u+w*v+b*S,y=r[4],g=r[5],w=r[6],b=r[7],e[4]=y*o+g*a+w*h+b*f,e[5]=y*i+g*c+w*d+b*p,e[6]=y*n+g*l+w*m+b*M,e[7]=y*s+g*u+w*v+b*S,y=r[8],g=r[9],w=r[10],b=r[11],e[8]=y*o+g*a+w*h+b*f,e[9]=y*i+g*c+w*d+b*p,e[10]=y*n+g*l+w*m+b*M,e[11]=y*s+g*u+w*v+b*S,y=r[12],g=r[13],w=r[14],b=r[15],e[12]=y*o+g*a+w*h+b*f,e[13]=y*i+g*c+w*d+b*p,e[14]=y*n+g*l+w*m+b*M,e[15]=y*s+g*u+w*v+b*S,e}function ot(e,t,r){var o=r[0],i=r[1],n=r[2],s,a,c,l,u,h,d,m,v,f,p,M;return t===e?(e[12]=t[0]*o+t[4]*i+t[8]*n+t[12],e[13]=t[1]*o+t[5]*i+t[9]*n+t[13],e[14]=t[2]*o+t[6]*i+t[10]*n+t[14],e[15]=t[3]*o+t[7]*i+t[11]*n+t[15]):(s=t[0],a=t[1],c=t[2],l=t[3],u=t[4],h=t[5],d=t[6],m=t[7],v=t[8],f=t[9],p=t[10],M=t[11],e[0]=s,e[1]=a,e[2]=c,e[3]=l,e[4]=u,e[5]=h,e[6]=d,e[7]=m,e[8]=v,e[9]=f,e[10]=p,e[11]=M,e[12]=s*o+u*i+v*n+t[12],e[13]=a*o+h*i+f*n+t[13],e[14]=c*o+d*i+p*n+t[14],e[15]=l*o+m*i+M*n+t[15]),e}function Qt(e,t,r){var o=r[0],i=r[1],n=r[2];return e[0]=t[0]*o,e[1]=t[1]*o,e[2]=t[2]*o,e[3]=t[3]*o,e[4]=t[4]*i,e[5]=t[5]*i,e[6]=t[6]*i,e[7]=t[7]*i,e[8]=t[8]*n,e[9]=t[9]*n,e[10]=t[10]*n,e[11]=t[11]*n,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function Bt(e,t,r){var o=Math.sin(r),i=Math.cos(r),n=t[4],s=t[5],a=t[6],c=t[7],l=t[8],u=t[9],h=t[10],d=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=n*i+l*o,e[5]=s*i+u*o,e[6]=a*i+h*o,e[7]=c*i+d*o,e[8]=l*i-n*o,e[9]=u*i-s*o,e[10]=h*i-a*o,e[11]=d*i-c*o,e}function Dt(e,t,r){var o=Math.sin(r),i=Math.cos(r),n=t[0],s=t[1],a=t[2],c=t[3],l=t[8],u=t[9],h=t[10],d=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=n*i-l*o,e[1]=s*i-u*o,e[2]=a*i-h*o,e[3]=c*i-d*o,e[8]=n*o+l*i,e[9]=s*o+u*i,e[10]=a*o+h*i,e[11]=c*o+d*i,e}function Et(e,t,r){var o=Math.sin(r),i=Math.cos(r),n=t[0],s=t[1],a=t[2],c=t[3],l=t[4],u=t[5],h=t[6],d=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=n*i+l*o,e[1]=s*i+u*o,e[2]=a*i+h*o,e[3]=c*i+d*o,e[4]=l*i-n*o,e[5]=u*i-s*o,e[6]=h*i-a*o,e[7]=d*i-c*o,e}function Jt(e,t,r){var o=t[0],i=t[1],n=t[2],s=t[3],a=o+o,c=i+i,l=n+n,u=o*a,h=o*c,d=o*l,m=i*c,v=i*l,f=n*l,p=s*a,M=s*c,S=s*l;return e[0]=1-(m+f),e[1]=h+S,e[2]=d-M,e[3]=0,e[4]=h-S,e[5]=1-(u+f),e[6]=v+p,e[7]=0,e[8]=d+M,e[9]=v-p,e[10]=1-(u+m),e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function te(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function ee(e,t){var r=t[0],o=t[1],i=t[2],n=t[4],s=t[5],a=t[6],c=t[8],l=t[9],u=t[10];return e[0]=Math.hypot(r,o,i),e[1]=Math.hypot(n,s,a),e[2]=Math.hypot(c,l,u),e}function re(e,t,r,o){var i=t[0],n=t[1],s=t[2],a=t[3],c=i+i,l=n+n,u=s+s,h=i*c,d=i*l,m=i*u,v=n*l,f=n*u,p=s*u,M=a*c,S=a*l,y=a*u,g=o[0],w=o[1],b=o[2];return e[0]=(1-(v+p))*g,e[1]=(d+y)*g,e[2]=(m-S)*g,e[3]=0,e[4]=(d-y)*w,e[5]=(1-(h+p))*w,e[6]=(f+M)*w,e[7]=0,e[8]=(m+S)*b,e[9]=(f-M)*b,e[10]=(1-(h+v))*b,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function oe(e,t){var r=t[0],o=t[1],i=t[2],n=t[3],s=r+r,a=o+o,c=i+i,l=r*s,u=o*s,h=o*a,d=i*s,m=i*a,v=i*c,f=n*s,p=n*a,M=n*c;return e[0]=1-h-v,e[1]=u+M,e[2]=d-p,e[3]=0,e[4]=u-M,e[5]=1-l-v,e[6]=m+f,e[7]=0,e[8]=d+p,e[9]=m-f,e[10]=1-l-h,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function ie(e,t,r,o,i){var n=1/Math.tan(t/2),s;return e[0]=n/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=n,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,i!=null&&i!==1/0?(s=1/(o-i),e[10]=(i+o)*s,e[14]=2*i*o*s):(e[10]=-1,e[14]=-2*o),e}var ne=ie;function Ut(e,t,r,o){var i,n,s,a,c,l,u,h,d,m,v=t[0],f=t[1],p=t[2],M=o[0],S=o[1],y=o[2],g=r[0],w=r[1],b=r[2];return Math.abs(v-g)<ut&&Math.abs(f-w)<ut&&Math.abs(p-b)<ut?yt(e):(u=v-g,h=f-w,d=p-b,m=1/Math.hypot(u,h,d),u*=m,h*=m,d*=m,i=S*d-y*h,n=y*u-M*d,s=M*h-S*u,m=Math.hypot(i,n,s),m?(m=1/m,i*=m,n*=m,s*=m):(i=0,n=0,s=0),a=h*s-d*n,c=d*i-u*s,l=u*n-h*i,m=Math.hypot(a,c,l),m?(m=1/m,a*=m,c*=m,l*=m):(a=0,c=0,l=0),e[0]=i,e[1]=a,e[2]=u,e[3]=0,e[4]=n,e[5]=c,e[6]=h,e[7]=0,e[8]=s,e[9]=l,e[10]=d,e[11]=0,e[12]=-(i*v+n*f+s*p),e[13]=-(a*v+c*f+l*p),e[14]=-(u*v+h*f+d*p),e[15]=1,e)}function tt(){var e=new I(3);return I!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function se(e){var t=e[0],r=e[1],o=e[2];return Math.hypot(t,r,o)}function at(e,t,r){var o=new I(3);return o[0]=e,o[1]=t,o[2]=r,o}function ae(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e}function ce(e,t){var r=t[0],o=t[1],i=t[2],n=r*r+o*o+i*i;return n>0&&(n=1/Math.sqrt(n)),e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e}function Vt(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function st(e,t,r){var o=t[0],i=t[1],n=t[2],s=r[0],a=r[1],c=r[2];return e[0]=i*c-n*a,e[1]=n*s-o*c,e[2]=o*a-i*s,e}var ue=se;(function(){var e=tt();return function(t,r,o,i,n,s){var a,c;for(r||(r=3),o||(o=0),i?c=Math.min(i*r+o,t.length):c=t.length,a=o;a<c;a+=r)e[0]=t[a],e[1]=t[a+1],e[2]=t[a+2],n(e,e,s),t[a]=e[0],t[a+1]=e[1],t[a+2]=e[2];return t}})();function Rt(){var e=new I(4);return I!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e}function le(e){var t=new I(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function G(e,t,r,o){var i=new I(4);return i[0]=e,i[1]=t,i[2]=r,i[3]=o,i}function Nt(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function Ot(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e}function he(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e[3]=t[3]*r[3],e}function de(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function fe(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e}function J(e,t){var r=t[0],o=t[1],i=t[2],n=t[3],s=r*r+o*o+i*i+n*n;return s>0&&(s=1/Math.sqrt(s)),e[0]=r*s,e[1]=o*s,e[2]=i*s,e[3]=n*s,e}function U(e,t,r){var o=t[0],i=t[1],n=t[2],s=t[3];return e[0]=r[0]*o+r[4]*i+r[8]*n+r[12]*s,e[1]=r[1]*o+r[5]*i+r[9]*n+r[13]*s,e[2]=r[2]*o+r[6]*i+r[10]*n+r[14]*s,e[3]=r[3]*o+r[7]*i+r[11]*n+r[15]*s,e}(function(){var e=Rt();return function(t,r,o,i,n,s){var a,c;for(r||(r=4),o||(o=0),i?c=Math.min(i*r+o,t.length):c=t.length,a=o;a<c;a+=r)e[0]=t[a],e[1]=t[a+1],e[2]=t[a+2],e[3]=t[a+3],n(e,e,s),t[a]=e[0],t[a+1]=e[1],t[a+2]=e[2],t[a+3]=e[3];return t}})();function ht(){var e=new I(4);return I!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e[3]=1,e}function pe(e,t,r){r=r*.5;var o=Math.sin(r);return e[0]=o*t[0],e[1]=o*t[1],e[2]=o*t[2],e[3]=Math.cos(r),e}function me(e,t,r){var o=t[0],i=t[1],n=t[2],s=t[3],a=r[0],c=r[1],l=r[2],u=r[3];return e[0]=o*u+s*a+i*l-n*c,e[1]=i*u+s*c+n*a-o*l,e[2]=n*u+s*l+o*c-i*a,e[3]=s*u-o*a-i*c-n*l,e}function ve(e,t,r){r*=.5;var o=t[0],i=t[1],n=t[2],s=t[3],a=Math.sin(r),c=Math.cos(r);return e[0]=o*c+s*a,e[1]=i*c+n*a,e[2]=n*c-i*a,e[3]=s*c-o*a,e}function ge(e,t,r){r*=.5;var o=t[0],i=t[1],n=t[2],s=t[3],a=Math.sin(r),c=Math.cos(r);return e[0]=o*c-n*a,e[1]=i*c+s*a,e[2]=n*c+o*a,e[3]=s*c-i*a,e}function _e(e,t,r){r*=.5;var o=t[0],i=t[1],n=t[2],s=t[3],a=Math.sin(r),c=Math.cos(r);return e[0]=o*c+i*a,e[1]=i*c-o*a,e[2]=n*c+s*a,e[3]=s*c-n*a,e}function ft(e,t,r,o){var i=t[0],n=t[1],s=t[2],a=t[3],c=r[0],l=r[1],u=r[2],h=r[3],d,m,v,f,p;return m=i*c+n*l+s*u+a*h,m<0&&(m=-m,c=-c,l=-l,u=-u,h=-h),1-m>ut?(d=Math.acos(m),v=Math.sin(d),f=Math.sin((1-o)*d)/v,p=Math.sin(o*d)/v):(f=1-o,p=o),e[0]=f*i+p*c,e[1]=f*n+p*l,e[2]=f*s+p*u,e[3]=f*a+p*h,e}function K(e,t){var r=t[0],o=t[1],i=t[2],n=t[3],s=r*r+o*o+i*i+n*n,a=s?1/s:0;return e[0]=-r*a,e[1]=-o*a,e[2]=-i*a,e[3]=n*a,e}function Zt(e,t){var r=t[0]+t[4]+t[8],o;if(r>0)o=Math.sqrt(r+1),e[3]=.5*o,o=.5/o,e[0]=(t[5]-t[7])*o,e[1]=(t[6]-t[2])*o,e[2]=(t[1]-t[3])*o;else{var i=0;t[4]>t[0]&&(i=1),t[8]>t[i*3+i]&&(i=2);var n=(i+1)%3,s=(i+2)%3;o=Math.sqrt(t[i*3+i]-t[n*3+n]-t[s*3+s]+1),e[i]=.5*o,o=.5/o,e[3]=(t[n*3+s]-t[s*3+n])*o,e[n]=(t[n*3+i]+t[i*3+n])*o,e[s]=(t[s*3+i]+t[i*3+s])*o}return e}var ct=le,ye=G,kt=J;(function(){var e=tt(),t=at(1,0,0),r=at(0,1,0);return function(o,i,n){var s=Vt(i,n);return s<-.999999?(st(e,t,i),ue(e)<1e-6&&st(e,r,i),ce(e,e),pe(o,e,Math.PI),o):s>.999999?(o[0]=0,o[1]=0,o[2]=0,o[3]=1,o):(st(e,i,n),o[0]=e[0],o[1]=e[1],o[2]=e[2],o[3]=1+s,kt(o,o))}})();(function(){var e=ht(),t=ht();return function(r,o,i,n,s,a){return ft(e,o,s,a),ft(t,i,n,a),ft(r,e,t,2*a*(1-a)),r}})();(function(){var e=Ft();return function(t,r,o,i){return e[0]=o[0],e[3]=o[1],e[6]=o[2],e[1]=i[0],e[4]=i[1],e[7]=i[2],e[2]=-r[0],e[5]=-r[1],e[8]=-r[2],kt(t,Zt(t,e))}})();const lt=class H{constructor(){A(this,"_coord"),A(this,"scale",t=>{const r=new H;return de(r._coord,this._coord,t),r}),A(this,"dot",t=>Vt(this.vec3(),t.vec3())),A(this,"add",t=>{const r=new H;return Nt(r._coord,this._coord,t._coord),r}),A(this,"multiply",t=>{const r=new H;return he(r._coord,this._coord,t._coord),r}),this._coord=G(0,0,0,0)}static get bufferSize(){return 4*4}static fromValues(t,r,o){const i=new H;return i._coord=G(t,r,o,0),i}static fromVec4(t){const r=new H,o=t[3]!==0?t[3]:1;return r._coord=G(t[0]/o,t[1]/o,t[2]/o,0),r}static fromVec3(t){const r=new H;return r._coord=G(t[0],t[1],t[2],0),r}static fromPoints(t,r){const o=new H;return Ot(o._coord,t.vec4(),r.vec4()),o}static fromPoint(t){const r=new H;return r._coord=[...t.triplet,0],r}toString(){return`Vector(${this.x}, ${this.y}, ${this.z})`}map(t){const r=new H;return t.isFrame()?U(r._coord,this._coord,t.inverseMatrix):U(r._coord,this._coord,t.directMatrix),r}unMap(t){const r=new H;return t.isFrame()?U(r._coord,this._coord,t.directMatrix):U(r._coord,this._coord,t.inverseMatrix),r}relative(t){return this.map(t)}absolute(t){return this.unMap(t)}isUnitVector(){return!1}get x(){return this._coord[0]}get y(){return this._coord[1]}get z(){return this._coord[2]}get triplet(){return[this.x,this.y,this.z]}get coordinates(){return[...this._coord.values()]}buffer(){return new Float32Array(this.coordinates)}get length(){const t=this._coord[0],r=this._coord[1],o=this._coord[2];return Math.sqrt(t*t+r*r+o*o)}get lengthSquare(){const t=this._coord[0],r=this._coord[1],o=this._coord[2];return t*t+r*r+o*o}vec3(){return at(this.x,this.y,this.z)}vec4(){return G(this.x,this.y,this.z,0)}};A(lt,"crossProduct",(e,t)=>{const r=tt();return st(r,e.vec3(),t.vec3()),lt.fromVec3(r)}),A(lt,"dot",(e,t)=>Vt(e.vec3(),t.vec3()));let L=lt;class _{constructor(){A(this,"_coord"),this._coord=G(0,0,0,1)}static get bufferSize(){return 4*4}static origin(){return new _}static fromValues(t,r,o,i=1){const n=new _;return n._coord=G(t/i,r/i,o/i,1),n}static fromVector(t){const r=new _;return r._coord=G(t.x,t.y,t.z,1),r}static fromVec4(t){const r=new _,o=t[3]!==0?t[3]:1;return r._coord=G(t[0]/o,t[1]/o,t[2]/o,1),r}static fromVec3(t){const r=new _;return r._coord=G(t[0],t[1],t[2],1),r}toString(){return`Point(${this.x}, ${this.y}, ${this.z})`}map(t){const r=new _;return t.isFrame()?U(r._coord,this._coord,t.inverseMatrix):U(r._coord,this._coord,t.directMatrix),r}unMap(t){const r=new _;return t.isFrame()?U(r._coord,this._coord,t.directMatrix):U(r._coord,this._coord,t.inverseMatrix),r}relative(t){return this.map(t)}absolute(t){return this.unMap(t)}static relative(t,r){return t.map(r)}static absolute(t,r){return t.unMap(r)}subtract(t){const r=Rt();return Ot(r,this._coord,t._coord),L.fromVec4(r)}scale(t){const r=tt();return ae(r,this.vec3(),t),_.fromVec3(r)}add(t){const r=new _;return Nt(r._coord,this._coord,t.vec4()),r}isPoint(){return!0}get x(){return this._coord[0]}get y(){return this._coord[1]}get z(){return this._coord[2]}get coordinates(){return[...this._coord.values()]}get triplet(){return[this.x,this.y,this.z]}buffer(){return new Float32Array(this.coordinates)}vec3(){return at(this.x,this.y,this.z)}vec4(){return G(this.x,this.y,this.z,1)}}const xt=class ${constructor(){A(this,"_coord"),this._coord=G(1,1,1,0)}static get bufferSize(){return 4*4}static fromVector(t){const r=new $;return r._coord=G(t.x,t.y,t.z,0),J(r._coord,r._coord),r}static fromPoints(t,r){const o=new $;return o._coord=G(t.x-r.x,t.y-r.y,t.z-r.z,0),J(o._coord,o._coord),o}fromPoint(t){return $.fromValues(...t.triplet)}static fromValues(t,r,o){const i=G(t,r,o,0);return J(i,i),$.fromVec4(i)}static fromVec4(t){const r=new $,o=t[3]!==0?t[3]:1;return r._coord=G(t[0]/o,t[1]/o,t[2]/o,0),J(r._coord,r._coord),r}static fromVec3(t){const r=new $;return r._coord=G(t[0],t[1],t[2],0),J(r._coord,r._coord),r}toString(){return`UnitVector(${this.x}, ${this.y}, ${this.z})`}map(t){const r=new $;return t.isFrame()?U(r._coord,this._coord,t.inverseMatrix):U(r._coord,this._coord,t.directMatrix),J(r._coord,r._coord),r}unMap(t){const r=new $;return t.isFrame()?U(r._coord,this._coord,t.directMatrix):U(r._coord,this._coord,t.inverseMatrix),J(r._coord,r._coord),r}relative(t){return this.map(t)}absolute(t){return this.unMap(t)}invert(){const t=new $;return fe(t._coord,this._coord),t}scale(t){return L.fromValues(this.x*t,this.y*t,this.z*t)}isUnitVector(){return!0}get x(){return this._coord[0]}get y(){return this._coord[1]}get z(){return this._coord[2]}get length(){return 1}get coordinates(){return[...this._coord.values()]}get triplet(){return[this.x,this.y,this.z]}buffer(){return new Float32Array(this.coordinates)}vec3(){return at(this.x,this.y,this.z)}};A(xt,"crossProduct",(e,t)=>{const r=tt();return st(r,e.vec3(),t.vec3()),xt.fromVec3(r)});let V=xt;const Tt=e=>e.isUnitVector();class x{constructor(){A(this,"_direct"),A(this,"_inverse"),A(this,"_isIdentity",!0),this._direct=W(),this._inverse=W(),z(this._inverse,this._direct)}static get bufferSize(){return 16*4}static world(){return new x}static identity(){return new x}static fromRotation(t){const r=new x;return oe(r._direct,t.quat),z(r._inverse,r._direct),r._isIdentity=!1,r}static fromMat4(t){const r=new x,o=W();return z(o,t),r._direct=j(t),r._inverse=j(o),r._isIdentity=!1,r}static lookAt(t,r,o){const i=new x;return Ut(i._direct,t.vec3(),r.vec3(),o.vec3()),z(i._inverse,i._direct),i._isIdentity=!1,i}static perspective(t,r,o,i){const n=new x;return ne(n._direct,t,r,o,i),z(n._inverse,n._direct),n._isIdentity=!1,n}static invert(t){const r=new x;return r._direct=j(t._inverse),r._inverse=j(t._direct),r._isIdentity=!1,r}static translation(t,r,o){const i=new x;return ot(i._direct,i._direct,[t,r,o]),z(i._inverse,i._direct),i._isIdentity=!1,i}static move(t){const r=new x;return ot(r._direct,r._direct,t.vec3()),z(r._inverse,r._direct),r._isIdentity=!1,r}static rotationX(t){const r=new x;return Bt(r._direct,r._direct,t),z(r._inverse,r._direct),r._isIdentity=!1,r}static rotationY(t){const r=new x;return Dt(r._direct,r._direct,t),z(r._inverse,r._direct),r._isIdentity=!1,r}static rotationZ(t){const r=new x;return Et(r._direct,r._direct,t),z(r._inverse,r._direct),r._isIdentity=!1,r}static scale(t,r,o){const i=new x;return Qt(i._direct,i._direct,[t,r,o]),z(i._inverse,i._direct),i._isIdentity=!1,i}static rotoTranslation(t,r){const o=new x;return Jt(o._direct,t.quat,r.vec3()),z(o._inverse,o._direct),o._isIdentity=!1,o}static fromRotationTranslationScale(t,r,o){const i=new x;return re(i._direct,t.quat,r.vec3(),o.vec3()),z(i._inverse,i._direct),i._isIdentity=!1,i}isFrame(){return!1}get values(){return this._direct.values()}get inverseValues(){return this._inverse.values()}buffer(){return new Float32Array(this._direct.values())}inverseBuffer(){return new Float32Array(this._inverse.values())}apply(t){return t.map(this)}compose(t){const r=new x,{_direct:o,_inverse:i}=this,{_direct:n,_inverse:s}=t;return wt(r._direct,n,o),wt(r._inverse,i,s),r._isIdentity=!1,r}transpose(){const t=new x;return Kt(t._direct,this._direct),z(t._inverse,t._direct),t._isIdentity=!1,t}translation(t,r,o){const i=x.translation(t,r,o);return this.compose(i)}rotationX(t){const r=x.rotationX(t);return this.compose(r)}rotationY(t){const r=x.rotationY(t);return this.compose(r)}rotationZ(t){const r=x.rotationZ(t);return this.compose(r)}scale(t,r,o){const i=x.scale(t,r,o);return this.compose(i)}invert(){const t=new x;return t._direct=j(this._inverse),t._inverse=j(this._direct),t._isIdentity=this._isIdentity,t}get directMatrix(){return this._direct}get inverseMatrix(){return this._inverse}get isIdentity(){return this._isIdentity}get scaleVector(){const t=tt();return ee(t,this._direct),L.fromValues(t[0],t[1],t[2])}get positionVector(){const t=tt();return te(t,this._direct),L.fromValues(t[0],t[1],t[2])}}const bt=class Y{constructor(){A(this,"_direct"),A(this,"_inverse"),this._direct=W(),this._inverse=W(),yt(this._direct),yt(this._inverse)}static bufferSize(){return 16*4}static world(){return new Y}static translation(t){const r=new Y,o=W();return ot(o,o,t.vec3()),r._inverse=o,z(r._direct,r._inverse),r}static rotationX(t,r){const o=new Y,i=W();return ot(i,i,t.vec3()),Bt(i,i,r),o._direct=i,z(o._inverse,o._direct),o}static rotationY(t,r){const o=new Y,i=W();return ot(i,i,t.vec3()),Dt(i,i,r),o._direct=i,z(o._inverse,o._direct),o}static rotationZ(t,r){const o=new Y,i=W();return ot(i,i,t.vec3()),Et(i,i,r),o._direct=i,z(o._inverse,o._direct),o}static lookAt(t,r,o){const i=new Y;return Ut(i._inverse,t.vec3(),r.vec3(),o.vec3()),z(i._direct,i._inverse),i}isFrame(){return!0}toString(){return`Frame(${this.origin}, ${this.i}, ${this.j}, ${this.k})`}map(t){return this.compose(t)}unMap(t){return this.invert().compose(t)}compose(t){const r=new Y,{_direct:o}=this,{_direct:i}=t;return wt(r._direct,i,o),z(r._inverse,r._direct),r}toTransform(){return x.fromMat4(this._inverse)}invert(){const t=new Y;return t._direct=j(this._inverse),t._inverse=j(this._direct),t}get directMatrix(){return j(this._direct)}get inverseMatrix(){return j(this._inverse)}get i(){return V.fromValues(this._direct[0],this._direct[1],this._direct[2])}get j(){return V.fromValues(this._direct[4],this._direct[5],this._direct[6])}get k(){return V.fromValues(this._direct[8],this._direct[9],this._direct[10])}get o(){return _.fromValues(this._direct[12],this._direct[13],this._direct[14],this._direct[15])}get origin(){return _.fromValues(this._inverse[12],this._inverse[13],this._inverse[14],this._inverse[15])}relative(t){if(t&&we(t)){const r=this.origin.relative(t),o=this.k.relative(t),i=this.i.relative(t);return Y.from2Vectors(r,o,i)}return t.relative(this)}};A(bt,"from2Vectors",(e,t,r)=>{const o=new bt,i=Tt(t)?t:V.fromVector(t),n=V.crossProduct(i,Tt(r)?r:V.fromVector(r)),s=[...V.crossProduct(n,i).coordinates,...n.coordinates,...i.coordinates,...e.coordinates];return o._direct=Wt(...s),z(o._inverse,o._direct),o});let Mt=bt;const we=e=>e&&e.isFrame!==void 0?e.isFrame():!1;class P{constructor(){A(this,"_direct"),A(this,"_inverse"),this._direct=ht(),this._inverse=ht()}static identity(){return new P}static fromValues(t,r,o,i){const n=new P;return n._direct=ye(t,r,o,i),K(n._inverse,n._direct),n}static fromAngles(t,r,o){return P.rotationX(t).rotateY(r).rotateZ(o)}static fromQuat(t){const r=new P;return r._direct=ct(t),K(r._inverse,r._direct),r}static fromArray(t){const r=new P;return r._direct=ct(t),K(r._inverse,r._direct),r}static fromTransform(t){const r=Ft();Xt(r,t.directMatrix);const o=new P;return o._direct=Zt(o._direct,r),K(o._inverse,o._direct),o}static rotationX(t){const r=new P;return ve(r._direct,r._direct,t),K(r._inverse,r._direct),r}static rotationY(t){const r=new P;return ge(r._direct,r._direct,t),K(r._inverse,r._direct),r}static rotationZ(t){const r=new P;return _e(r._direct,r._direct,t),K(r._inverse,r._direct),r}rotateX(t){const r=new P;return r._direct=this._direct,r._inverse=this._inverse,r.compose(P.rotationX(t)),r}rotateY(t){const r=new P;return r._direct=this._direct,r._inverse=this._inverse,r.compose(P.rotationY(t)),r}rotateZ(t){const r=new P;return r._direct=this._direct,r._inverse=this._inverse,r.compose(P.rotationZ(t)),r}inverse(){const t=new P;return t._direct=ct(this._inverse),t._inverse=ct(this._direct),t}compose(t){const r=new P;return me(r._direct,this._direct,t._direct),K(r._inverse,r._direct),r}get quat(){return this._direct}}const E=e=>e/180*Math.PI;var xe=Object.defineProperty,be=(e,t,r)=>t in e?xe(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,T=(e,t,r)=>(be(e,typeof t!="symbol"?t+"":t,r),r);const Pt=()=>{let e=0,t=performance.now(),r=0;const o=[];return{getFPS:()=>o.reduce((i,n)=>i+n,0)/o.length,measureFPS:()=>(e=performance.now()-t,e<=1?o[r]:(r=(r+1)%10,o[r]=1e3/e,t=performance.now(),e)),getLastTimeSpan:()=>e}},Me=async({context:e,device:t,format:r},o)=>{e.configure({device:t,format:r,alphaMode:"opaque"});const i=t.createShaderModule({code:o});return(await i.getCompilationInfo()).messages.forEach(n=>{let s=n.message;n.lineNum&&(s=`Line ${n.lineNum}:${n.linePos} - "${o.substr(n.offset,n.length+40)}"
`+n.message),console.error("WGSL error: ",s)}),i},Ve=(e,t,r=GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST)=>{const o=e.createBuffer({size:t.byteLength,usage:r,mappedAtCreation:!0});return new Float32Array(o.getMappedRange()).set(t),o.unmap(),o},Ct=e=>{const{device:t,canvas:r}=e,o=t.createTexture({size:{width:r.width,height:r.height,depthOrArrayLayers:1},sampleCount:1,format:e.format,usage:GPUTextureUsage.RENDER_ATTACHMENT}),i=t.createTexture({label:"DepthTexture",sampleCount:1,size:[r.width,r.height,1],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),n=Ne(window.getComputedStyle(r).backgroundColor);return{colorAttachments:[{view:o.createView(),clearValue:n,loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:i.createView(),depthClearValue:1,depthStoreOp:"store",depthLoadOp:"clear"}}},Se=async e=>{const t=await navigator.gpu.requestAdapter({powerPreference:"high-performance"});if(!t)throw new Error("WebGPU:adapter is NOT available!");const r=await t.requestDevice();if(!r)throw new Error("WebGPU:device is NOT available!");const o=e.getContext("webgpu");if(!o)throw new Error("WebGPU:context from instantiated Canvas not available!");const i=navigator.gpu.getPreferredCanvasFormat();o.configure({device:r,format:i,usage:GPUTextureUsage.RENDER_ATTACHMENT,alphaMode:"opaque"});const n=await t.requestAdapterInfo();return console.info("WebGPU: adapter:",n),console.info("WebGPU: fallback adapter:",t.isFallbackAdapter),console.info("WegGPU: maxBindGroups:",r.limits.maxBindGroups),{context:o,device:r,canvas:e,format:i}},Te=e=>typeof e=="string",Pe=(e,[t,r],o)=>({view:o&&o.view?o.view(e.view):x.lookAt(_.fromValues(-5,-5,-5),_.fromValues(0,0,0),V.fromValues(0,0,1)),projection:o&&o.projection?o.projection(e.projection):x.perspective(Math.PI/5,t/r,.1,100)}),Ce=e=>e!==null,Le=e=>{const t=3*x.bufferSize+8+4*(2*L.bufferSize)+4*(L.bufferSize+_.bufferSize),r=4,o=r*(2*L.bufferSize)+r*(L.bufferSize+_.bufferSize)+4*4,i=e.device.createBuffer({label:"TransBuffer",size:t+t%16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),n=e.device.createBuffer({label:"LightBuffer",size:o+o%16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),s=[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}],a=e.device.createBindGroupLayout({label:"transformations",entries:s}),c=[{binding:0,resource:{buffer:i}},{binding:1,resource:{buffer:n}}],l=e.device.createBindGroup({label:"SceneData",layout:a,entries:c});return[a,l,[i,n]]},ze=e=>{const t=2*x.bufferSize,r=e.device.createBuffer({label:"TransBuffer",size:t+t%16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),o=[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}],i=e.device.createBindGroupLayout({label:"modelTransf",entries:o}),n=[{binding:0,resource:{buffer:r}}],s=e.device.createBindGroup({label:"SceneData",layout:i,entries:n});return[i,s,[r]]},Ge=e=>{const t=e.device.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),r=e.device.createBuffer({size:4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),o=[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}],i=e.device.createBindGroupLayout({label:"color",entries:o}),n=[{binding:0,resource:{buffer:t}},{binding:1,resource:{buffer:r}}],s=e.device.createBindGroup({label:"color",layout:i,entries:n});return[i,s,[t,r]]},Ae=(e,t)=>{const{device:r}=e,o={addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"nearest",mipmapFilter:"linear",maxAnisotropy:1},i=r.createSampler(o),n=t.views.filter(Ce),s=[...n.map((u,h)=>({binding:h,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float"}})),{binding:4,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}}],a=e.device.createBindGroupLayout({label:"texture",entries:s}),c=[...n.map((u,h)=>({binding:h,resource:u})),{binding:4,resource:i}],l=e.device.createBindGroup({label:"texture",layout:a,entries:c});return[a,l]},Ie=(e,t)=>{const{device:r}=e,[o,i,n]=Le(e),[s,a,c]=Ge(e),[l,u,h]=ze(e),[d,m]=t?Ae(e,t):[void 0,void 0],v=d?[o,s,l,d]:[o,s,l],f={sceneGroup:i,colorGroup:a,modelGroup:u,texturesGroup:m},p={sceneBuffers:n,colorBuffers:c,modelBuffers:h};return[r.createPipelineLayout({bindGroupLayouts:v}),f,p]},Lt=(e,t,r)=>{const{device:o,format:i}=e,n=r.map(s=>{const[a,c,l]=Ie(e,s.material),u={label:s.label,layout:a,multisample:{count:1},vertex:{module:t,entryPoint:s.vertexShader,buffers:[s.bufferLayout]},fragment:{module:t,entryPoint:s.fragmentShader,targets:[{format:i,blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},alpha:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"}}}]},primitive:{topology:s.primitives,cullMode:s.cullMode},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus"}},h=o.createRenderPipeline(u),d={...u,label:`${s.label}-alt`,primitive:{topology:s.primitives==="line-list"?s.primitives:"line-strip",cullMode:"none"}},m=o.createRenderPipeline(d);return[s.id,{id:s.id,type:s.label,pipeline:h,altPipeline:m,geoRenderable:s,uniformBuffers:l,bindGroups:c}]});return new Map(n)},Fe=(e,t)=>{let r="none",o=[0,0],i=[0,0],n=[0,0];e.addEventListener("contextmenu",s=>{s.preventDefault()}),e.addEventListener("wheel",s=>{s.ctrlKey?t.tilt(s.deltaY):t.zoom(s.deltaY)}),e.addEventListener("pointerdown",s=>{e.setPointerCapture(s.pointerId),o=[s.offsetX,s.offsetY],i=[0,0],n=o,r=`${s.ctrlKey?"ctrl-":""}mouse-${s.button}`,t.move(r,{origin:o,direction:i},n)}),e.addEventListener("pointermove",s=>{if(r==="none")return;const a=[s.offsetX,s.offsetY];i=[a[0]-n[0],a[1]-n[1]],n=a,t.move(r,{origin:o,direction:i},n)}),e.addEventListener("pointerup",s=>{e.releasePointerCapture(s.pointerId);const a=[s.offsetX,s.offsetY];i=[a[0]-o[0],a[1]-o[1]],i[0]<=.9&&i[1]<=.9&&t.click("none",a),t.move("none",{origin:o,direction:i},a),r="none"})},Be=`const MAX_DIR_LIGHTS: u32 = 4;
const MAX_POINT_LIGHTS: u32 = 4;

struct DirectionalLight {
  dir: vec4<f32>,
  col: vec4<f32>,
};

struct PointLight {
  pos: vec4<f32>,  // Position of the light
  col: vec4<f32>,  // Color of the light
};

struct SceneData {
  view: mat4x4<f32>,
  invertView: mat4x4<f32>,
  projection: mat4x4<f32>,
};

struct ModelData {
  model: mat4x4<f32>,
  modelInverseTranspose: mat4x4<f32>,
};

struct SceneLights {
  dirLights: array<DirectionalLight, MAX_DIR_LIGHTS>,
  pointLights: array<PointLight, MAX_POINT_LIGHTS>,
  ambient: vec4<f32>,
};

struct ObjectData {
  model: mat4x4<f32>,
};

struct TextFragment {
  @builtin(position) position: vec4<f32>,
  @location(0) texCoord: vec2<f32>,
  @location(1) normal: vec3<f32>,
  @location(2) pos: vec3<f32>,
  @location(3) eye: vec3<f32>,
  @location(4) viewZ: f32,
};

struct ColorFragment {
  @builtin(position) position: vec4<f32>,
  @location(0) normal: vec3<f32>,
  @location(1) pos: vec3<f32>,
  @location(2) eye: vec3<f32>,
  @location(3) viewZ: f32,
};

struct ColorLineFragment {
  @builtin(position) position: vec4<f32>,
  @location(0) viewZ: f32,
  @location(1) targetZ: f32,
  @location(2) color: vec4<f32>,
};

struct ColorData {
    color: vec4<f32>,
};

struct TextureAlpha {
    value: f32
};

@group(0) @binding(0) var<uniform> sceneData: SceneData;
@group(0) @binding(1) var<uniform> sceneLights: SceneLights;
@group(1) @binding(0) var<uniform> myColor: ColorData;
@group(1) @binding(1) var<uniform> textureAlpha: TextureAlpha;
@group(2) @binding(0) var<uniform> myModel: ModelData;
@group(3) @binding(0) var myTexture0: texture_2d<f32>;
@group(3) @binding(1) var myTexture1: texture_2d<f32>;
@group(3) @binding(2) var myTexture2: texture_2d<f32>;
@group(3) @binding(3) var myTexture3: texture_2d<f32>;
@group(3) @binding(4) var mySampler: sampler;

/**
  * Computes the diffuse color for a given point in the scene.
  *
  * @param eye The position of the camera.
  * @param pos The position of the point in the scene.
  * @param normal The normal of the point in the scene.
  * @param sceneLights The lights in the scene.
  * @return The diffuse color for the point.
  */
fn computeDiffuseColor(
    eye: vec3<f32>,
    pos: vec3<f32>,
    normal: vec3<f32>,
    sceneLights: SceneLights) -> vec3<f32> {
  var diffuse: vec3<f32> = sceneLights.ambient.rgb;
  for (var i: u32 = 0; i < MAX_DIR_LIGHTS; i = i + 1) {
    if (sceneLights.dirLights[i].col.a == 0.0) {
      continue;
    }
    let lightDir: vec3<f32> = -normalize(sceneLights.dirLights[i].dir.xyz); //
    let lightColor: vec3<f32> = sceneLights.dirLights[i].col.rgb;
    var NdotL: f32 = max(dot(normal, lightDir), 0);
    let diffuseColor = NdotL * lightColor;

    diffuse = diffuse + diffuseColor;
  }
  for (var i: u32 = 0; i < MAX_POINT_LIGHTS; i = i + 1) {
    if (sceneLights.pointLights[i].col.a == 0.0) {
        continue;
    }
    let dir = sceneLights.pointLights[i].pos.xyz - pos; //  - pos.xyz;
    let attenuation = 1.0 - clamp(pow( length(dir)/50, 2.0), 0.0, 1.0 );

    let lightDir: vec3<f32> = normalize(dir);
    let lightColor: vec3<f32> = sceneLights.pointLights[i].col.rgb;
    var NdotL: f32 = pow(max(dot(normal, lightDir), 0), 2);
    let diffuseColor = NdotL * lightColor;

    diffuse = diffuse + diffuseColor * attenuation;
  }
  return clamp(diffuse, vec3<f32>(0, 0, 0), vec3<f32>(1.0, 1.0, 1.0));
}

/**
  * Computes the diffuse color for a given point in the scene.
  *
  * @param eye The position of the camera.
  * @param pos The position of the point in the scene.
  * @param normal The normal of the point in the scene.
  * @param sceneLights The lights in the scene.
  * @return The diffuse color for the point.
  */
fn computeSpecularColor(
    eye: vec3<f32>,
    pos: vec3<f32>,
    normal: vec3<f32>,
    sceneLights: SceneLights) -> vec3<f32> {
  let shininess: f32 = 64.0;
  var specular: vec3<f32> = vec3<f32>(0, 0, 0);

  for (var i: u32 = 0; i < MAX_POINT_LIGHTS; i = i + 1) {
    if (sceneLights.pointLights[i].col.a == 0.0) {
      continue;
    }
    let dir = sceneLights.pointLights[i].pos.xyz - pos; //  - pos.xyz;
    let attenuation = 1.0 - clamp(pow( length(dir)/14.0, 2.0), 0.0, 1.0 );

    let lightDir: vec3<f32> = normalize(dir);
    let lightColor: vec3<f32> = sceneLights.pointLights[i].col.rgb;

    // Specular
    let V = normalize(pos - eye);
    let R = normalize(reflect(lightDir, normal));
    let specularIntensity = pow(max(dot(V, R), 0.0), shininess);
    let specularColor = specularIntensity * lightColor;

    specular = specular + specularColor * attenuation;
  }

  return clamp(specular, vec3<f32>(0, 0, 0), vec3<f32>(1.0, 1.0, 1.0));
}


/**
  * Computes the distance from a point to a segment.
  *
  * @param point The point.
  * @param segmentStart The start of the segment.
  * @param segmentEnd The end of the segment.
  * @return The distance from the point to the segment.
  */
fn computeDistanceToSegment( point: vec3<f32>, segmentStart: vec3<f32>, segmentEnd: vec3<f32> ) -> f32 {
  let segment = segmentEnd - segmentStart;
  let segmentLength = length(segment);
  let segmentDirection = segment / segmentLength;
  let pointToStart = point - segmentStart;
  let projection = dot(pointToStart, segmentDirection);
  if (projection < 0.0) {
    return length(pointToStart);
  }
  if (projection > segmentLength) {
    return length(point - segmentEnd);
  }
  return length(pointToStart - projection * segmentDirection);
}

fn computeDistanceToCameraAttenuation( d: f32 ) -> f32 {
  return 1.0 - clamp(log(d) / log(1000), 0.0, 1.0);
}

// ----------------------------------------------------------------------------------------------- Texture Shaders

@vertex
fn vertexTextureShader(
    @location(0) vertexPosition: vec3<f32>,
    @location(1) vertexTexCoord: vec2<f32>,
    @location(2) vertexNormal: vec3<f32>) -> TextFragment {
  var output: TextFragment;
  var vertex = myModel.model * vec4<f32>(vertexPosition, 1.0);
  var positionInViewSpace = sceneData.view * vertex;

  output.position = sceneData.projection * sceneData.view * vertex;
  output.texCoord = vec2<f32>(vertexTexCoord);
  output.normal = normalize((myModel.modelInverseTranspose * vec4<f32>(vertexNormal, 0.0)).xyz);
  output.pos = vertex.xyz;
  output.eye = sceneData.invertView[3].xyz;
  output.viewZ = log(-positionInViewSpace.z);

  return output;
}

@fragment
fn fragmentTextureShader(in: TextFragment) -> @location(0) vec4<f32> {
  let diffuse: vec3<f32> = computeDiffuseColor( in.eye, in.pos, in.normal, sceneLights );
  let specular: vec3<f32> = computeSpecularColor( in.eye, in.pos, in.normal, sceneLights );
  let texColor: vec4<f32> = textureSample(myTexture0, mySampler, in.texCoord);
  let att: f32 = computeDistanceToCameraAttenuation(in.viewZ);

  let textMix = vec4<f32>(1-textureAlpha.value);
  let finalColor = mix(texColor, myColor.color, textMix); // mixed the two colors based on alpha.
  return clamp(
    vec4<f32>((finalColor.rgb * diffuse + specular) * att, max(finalColor.a, texColor.a)* att),
    vec4<f32>(0, 0, 0, 0.0), vec4<f32>(1.0, 1.0, 1.0, 1.0)
  );

}

// ----------------------------------------------------------------------------------------------- Color Shaders

@vertex
fn vertexColorShader(
    @location(0) vertexPosition: vec3<f32>,
    @location(1) vertexNormal: vec3<f32>) -> ColorFragment {
  var output: ColorFragment;
  var vertex = myModel.model * vec4<f32>(vertexPosition, 1.0);
  var positionInViewSpace = sceneData.view * vertex;
  var bias = 0.002 * positionInViewSpace.z;

  var biasedPositionInViewSpace = positionInViewSpace - vec4<f32>(0.0, 0.0, bias, 0.0);

  output.normal = normalize((myModel.modelInverseTranspose * vec4<f32>(vertexNormal, 0.0)).xyz);
  output.position = sceneData.projection * sceneData.view * vertex;
  output.pos = vertex.xyz;
  output.eye = sceneData.invertView[3].xyz;
  output.viewZ = -biasedPositionInViewSpace.z;

  return output;
}

@fragment
fn fragmentColorShader(in: ColorFragment) -> @location(0) vec4<f32> {
  let diffuse: vec3<f32> = computeDiffuseColor( in.eye, in.pos, in.normal, sceneLights );
  let specular: vec3<f32> = computeSpecularColor( in.eye, in.pos, in.normal, sceneLights );
  let att: f32 =  computeDistanceToCameraAttenuation(in.viewZ);

  return clamp(
    vec4<f32>((myColor.color.rgb * diffuse.rgb + specular) * att, myColor.color.a * att),
    vec4<f32>(0, 0, 0, 0.0), vec4<f32>(1.0, 1.0, 1.0, 1.0)
  );

}


@vertex
fn vertexLineShader(
  @location(0) vertexPosition: vec3<f32>,
  @location(1) vertexColor: vec4<f32>
) -> ColorLineFragment {
  var output: ColorLineFragment;
  var vertex = myModel.model * vec4<f32>(vertexPosition, 1.0);

  let eye  = vec4<f32>(sceneData.invertView[3].xyz, 1.0);

  let eyeInViewSpace = sceneData.view * eye;
  let positionInViewSpace = sceneData.view * vertex;
  let bias = 0.002 * positionInViewSpace.z;
  let biasedPositionInViewSpace = positionInViewSpace - vec4<f32>(0.0, 0.0, bias, 0.0);
  output.viewZ = -biasedPositionInViewSpace.z;
  output.targetZ = -eyeInViewSpace.z;
  output.position = sceneData.projection * biasedPositionInViewSpace;
  output.color = vertexColor;

  return output;
}


@fragment
fn fragmentLineShader(in: ColorLineFragment) -> @location(0) vec4<f32> {
  let att: f32 = computeDistanceToCameraAttenuation(in.viewZ);

  return vec4<f32>(in.color.rgb * att, in.color.a * att);
}
`,De="",Ee=e=>{const{canvas:t,context:r,device:o}=e;let[i,n]=[t.width,t.height];return new ResizeObserver(s=>{const{width:a,height:c}=s[0].contentRect;[i,n]=[Math.round(a),Math.round(c)]}).observe(t.parentElement),s=>{if(i===t.width&&n===t.height){const h=r.getCurrentTexture(),d=s.colorAttachments;return d[0].view=h.createView({label:"ColorView"}),s}t.width=i,t.height=n;const a=o.createTexture({label:"DepthTexture",sampleCount:1,size:[i,n,1],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),c=o.createTexture({label:"ColorTexture",size:{width:i,height:n,depthOrArrayLayers:1},sampleCount:1,format:"bgra8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT}),l=s.colorAttachments;l[0].view=c.createView({label:"ColorView"});const u=s.depthStencilAttachment;return u.view=a.createView({label:"DepthView"}),s}};class St{constructor(t,r,o,i){T(this,"canvas"),T(this,"context"),T(this,"device"),T(this,"format"),T(this,"_handleOnRender"),T(this,"_vertexCount",0),T(this,"_activeRenderLoop",!1),T(this,"_pipelineMode","default"),T(this,"_shaderModule"),T(this,"_pipelines",new Map),T(this,"_transformations",{projection:x.identity(),view:x.identity()}),T(this,"_renderPassDescription"),T(this,"_cameraTransHandler"),T(this,"_lightsHandler"),T(this,"_modelHandlers",{}),T(this,"_fps",Pt()),T(this,"_rebuildViewTexture"),T(this,"_ambientLight",[.3,.3,.3,1]),T(this,"_dirLights",[{dir:V.fromValues(0,0,1),col:[.4,.4,.4,0]},{dir:V.fromValues(1,1,1),col:[.4,.3,.3,0]},{dir:V.fromValues(1,0,0),col:[.5,.5,.5,0]},{dir:V.fromValues(-1,-1,-1),col:[.3,.3,.3,0]}]),T(this,"_pointLights",[{pos:_.fromValues(-12,12,8),col:[.5,.5,.2,0]},{pos:_.fromValues(12,12,8),col:[.4,.2,.2,0]},{pos:_.fromValues(-12,-12,8),col:[.2,.2,.5,0]},{pos:_.fromValues(12,-12,8),col:[.5,.1,.5,0]}]),T(this,"render",()=>{const{device:n}=this;this._vertexCount=0,this._handleOnRender&&this._handleOnRender(this);let s=this._renderPassDescription??Ct(this);this._rebuildViewTexture&&(this._renderPassDescription=this._rebuildViewTexture(s));const a=n.createCommandEncoder(),c=a.beginRenderPass(s),l=this._fps.getLastTimeSpan();this.updateLights(l),this.pipelines.filter(({geoRenderable:u})=>u.colors[0][3]===1).forEach((u,h)=>{this.renderPipeline(u,h,c,l)}),this.pipelines.filter(({geoRenderable:u})=>u.colors[0][3]<1).forEach((u,h)=>{this.renderPipeline(u,h,c,l)}),c.end(),n.queue.submit([a.finish()])}),this.canvas=t,this.context=r,this.device=o,this.format=i,this._rebuildViewTexture=Ee(this),this.device.lost.then(()=>{console.log("WebGPU:device lost")})}get vertexCount(){return this._vertexCount}get fps(){return this._fps.getFPS()}get dirLights(){return this._dirLights}get pontLights(){return this._pointLights}setAmbientLight(t){this._ambientLight=t}setLight(t,r,o){switch(t){case"directional":this._dirLights[r]=o;break;case"point":this._pointLights[r]=o;break}}static async build(t){return Se(t).then(({canvas:r,context:o,device:i,format:n})=>new St(r,o,i,n))}setPipelineMode(t){this._pipelineMode=t}get pipelines(){return[...this._pipelines.values()]}getScene(){return[...this._pipelines.values()].map(({geoRenderable:t})=>t)}async setupShaders(t){if(this._shaderModule)return this;let r;if(Te(t))switch(t){case"standard-3d":r=Be;break;case"standard-2d":default:r=De;break}else r=t.source;return this._shaderModule=await Me(this,r),this}setScene(t){if(!this._shaderModule)throw new Error("WebGPU:shader module is NOT available!");t.forEach(r=>{r.buildGpuBuffer(this)}),this._pipelines=Lt(this,this._shaderModule,t),this._renderPassDescription=Ct(this)}addToScene(t){if(!this._shaderModule)throw new Error("WebGPU:shader module is NOT available!");t.forEach(r=>{r.buildGpuBuffer(this)}),Lt(this,this._shaderModule,t).forEach((r,o)=>{this._pipelines.set(o,r)})}removeFromScene(t){return this._pipelines.delete(t)}clearScene(){this._pipelines.clear()}captureMouseMotion(t){Fe(this.canvas,{move:(t==null?void 0:t.move)??((r,o,i)=>{}),click:(t==null?void 0:t.click)??((r,o)=>{}),zoom:(t==null?void 0:t.zoom)??(r=>{}),tilt:(t==null?void 0:t.tilt)??(r=>{})})}sceneIntoBuffer(t){const{device:r}=this,{projection:o,view:i}=this._transformations,n=i.invert();let s=0;r.queue.writeBuffer(t[0],s,i.buffer()),s+=x.bufferSize,r.queue.writeBuffer(t[0],s,n.buffer()),s+=x.bufferSize,r.queue.writeBuffer(t[0],s,o.buffer()),s+=x.bufferSize;let a=0;const c=new Float32Array(this._dirLights.flatMap(({dir:h,col:d})=>[...h.coordinates,...d]));r.queue.writeBuffer(t[1],a,c),a+=c.byteLength;const l=new Float32Array(this._pointLights.flatMap(({pos:h,col:d})=>[...h.coordinates,...d]));r.queue.writeBuffer(t[1],a,l),a+=l.byteLength;const u=new Float32Array(this._ambientLight);r.queue.writeBuffer(t[1],a,u)}updateLights(t){if(!this._lightsHandler)return;const{dirLights:r,posLights:o}=this._lightsHandler;r&&r(t,this._dirLights),o&&o(t,this._pointLights)}onRender(t){this._handleOnRender=t}renderPipeline(t,r,o,i){const{pipeline:n,altPipeline:s,uniformBuffers:a,bindGroups:c,geoRenderable:l}=t,{device:u}=this;r===0&&(this.sceneIntoBuffer(a.sceneBuffers),o.setBindGroup(0,c.sceneGroup));const h=this._pipelineMode==="default"?n:s;o.setPipeline(h),this._modelHandlers[l.id]&&l.transform(i,this._modelHandlers[l.id]),u.queue.writeBuffer(a.modelBuffers[0],0,l.transformationData),o.setBindGroup(2,c.modelGroup),c.texturesGroup&&o.setBindGroup(3,c.texturesGroup),l.buffers.forEach((d,m)=>{const v=new Float32Array(l.colors[m]);u.queue.writeBuffer(a.colorBuffers[0],0,v),u.queue.writeBuffer(a.colorBuffers[1],0,new Float32Array([l.textureAlpha])),o.setBindGroup(1,c.colorGroup);const f=l.getVertexCountPerStrip(m);this._vertexCount+=f,o.setVertexBuffer(0,d),o.draw(f)})}renderLoop(){const{width:t,height:r}=this.canvas;this._transformations=Pe(this._transformations,[t,r],this._cameraTransHandler),this.render(),this._fps.measureFPS(),this._activeRenderLoop&&requestAnimationFrame(this.renderLoop.bind(this))}beginRenderLoop(t){this._fps=Pt(),this._cameraTransHandler=t==null?void 0:t.camera,this._lightsHandler=t==null?void 0:t.lights,this._modelHandlers=(t==null?void 0:t.models)??{},this._activeRenderLoop=!0,this.renderLoop()}endRenderLoop(){this._activeRenderLoop=!1}}let it=new Map;const Ue=async e=>{var t,r;if(!navigator.gpu)return Promise.reject(new Error("WebGPU is not supported in this browser!"));const o=(t=it.get(e.id))==null?void 0:t.gpu;if(o)return Promise.resolve(o);if((r=it.get(e.id))!=null&&r.initializing)return new Promise((n,s)=>{setTimeout(()=>{var a;const c=(a=it.get(e.id))==null?void 0:a.gpu;if(c)return console.warn("WebGPU connection already initialized. Reusing previous connection."),n(c);s(new Error("WebGPU already initialization is taking too long!"))},100)});it.set(e.id,{initializing:!0});const i=await St.build(e);return it.set(e.id,{initializing:!1,gpu:i}),Promise.resolve(i)},Re=(e,t,r)=>{const{device:o}=e,i="rgba8unorm",n={label:t,size:[r.width,r.height,1],format:i,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT},s=o.createTexture(n);o.queue.copyExternalImageToTexture({source:r},{texture:s},[r.width,r.height]);const a=s.createView({label:`${t}-view`});return{name:t,textures:[s],views:[a]}},Ne=e=>{let t=[];const r=/rgba?\(([^)]+)\)/.exec(e);if(r&&r[1]&&(t=r[1].split(",").map(a=>parseFloat(a.trim()))),t.length<3)throw new Error("Invalid RGB/RGBA format");const o=t[0]/255,i=t[1]/255,n=t[2]/255,s=t.length===4?t[3]:1;return{r:o,g:i,b:n,a:s}},Oe=async(e,t)=>{const r=new URL(t,window.location.href);return new Promise((o,i)=>{const n=new Image;n.src=r.href,n.onerror=s=>{i(s)},n.onload=()=>{createImageBitmap(n).then(s=>Re(e,r.pathname,s)).then(s=>o([e,s]))}})},Ze=async(e,t)=>Promise.all(t.map(r=>Oe(e,r))).then(r=>Promise.resolve([e,r.map(([,o])=>o)])),Q=4;class dt{constructor(t,r,o){T(this,"_body",null),T(this,"_id"),T(this,"_bufferData",null),T(this,"_vertices",[]),T(this,"_vertexColors",[]),T(this,"_vertexNormals",[]),T(this,"_vertexTextureCoords",[]),T(this,"_stripColors",[]),T(this,"_textureAlpha",1),T(this,"_vertexByteSize",0),T(this,"_buffers",[]),T(this,"_bufferLayout",null),T(this,"_topology","triangle-list"),T(this,"_cullMode","back"),T(this,"_material",null),T(this,"_transformation",{rotation:P.identity(),scale:L.fromValues(1,1,1),translation:L.fromValues(0,0,0)}),this._id=t,this._topology=r,this._vertexByteSize=3*4,this._stripColors=o.colors??[[0,0,0,0]],this._textureAlpha=o.textureAlpha??1}get id(){return this._id}get textureAlpha(){return this._textureAlpha}get label(){return this._topology}get translationVector(){return this._transformation.translation??L.fromValues(0,0,0)}get orientationRotation(){return this._transformation.rotation??P.identity()}get scaleVector(){return this._transformation.scale??L.fromValues(1,1,1)}get hasTextures(){return this._vertexTextureCoords.length>0&&this._material!==null}get material(){return this._material}get vertexShader(){return this._topology==="triangle-strip"||this._topology==="triangle-list"?this.hasTextures?"vertexTextureShader":"vertexColorShader":"vertexLineShader"}get fragmentShader(){return this._topology==="triangle-strip"||this._topology==="triangle-list"?this.hasTextures?"fragmentTextureShader":"fragmentColorShader":"fragmentLineShader"}get colors(){return this._stripColors}get primitives(){return this._topology}get cullMode(){return this._topology==="triangle-strip"||this._topology==="triangle-list"?this._cullMode:"none"}get vertexCount(){return this._vertices.reduce((t,r)=>t+r.length/3,0)}get body(){return this._body}get transformation(){return x.fromRotationTranslationScale(this._transformation.rotation??P.identity(),this._transformation.translation??L.fromValues(0,0,0),this._transformation.scale??L.fromValues(1,1,1))}get transformationData(){const t=this.transformation;return new Float32Array([...t.values,...t.transpose().invert().values])}setMaterial(t){this._material=t}setBody(t){return this._body=t,this}scale(t){return this._transformation.scale=this.scaleVector.multiply(t),this}translate(t){return this._transformation.translation=this.translationVector.add(t),this}rotate(t){return this._transformation.rotation=this.orientationRotation.compose(t),this}rotoTranslate(t,r){const o=this._transformation;return o.rotation=t,o.translation=r,this}transform(t,r){return this._transformation=r(t,this._transformation),this}getVertexCountPerStrip(t){return this._vertices[t].length/3}get vertexByteSize(){return this._vertexByteSize}getByteSizePerStrip(t=0){return this._vertices[t].length*Q+(this._vertexColors.length>0?this._vertexColors[t].length*Q:0)+(this._vertexNormals.length>0?this._vertexNormals[t].length*Q:0)+(this._vertexTextureCoords.length>0?this._vertexTextureCoords[t].length*Q:0)}setCullMode(t){return this._cullMode=t,this}addVertices(t){this._vertices.push(t)}getBufferData(){return this._bufferData!==null?this._bufferData:(this._bufferData=this._vertices.map((t,r)=>{const o=[];for(let i=0,n=0,s=0,a=0;i<t.length;i+=3,n+=4,s+=3,a+=2){const c=[t[i+0],t[i+1],t[i+2]];this._vertexColors.length>r&&(c.push(this._vertexColors[r][n+0]),c.push(this._vertexColors[r][n+1]),c.push(this._vertexColors[r][n+2]),c.push(this._vertexColors[r][n+3])),this._vertexTextureCoords.length>r&&(c.push(this._vertexTextureCoords[r][a+0]),c.push(this._vertexTextureCoords[r][a+1])),this._vertexNormals.length>r&&(c.push(this._vertexNormals[r][s+0]),c.push(this._vertexNormals[r][s+1]),c.push(this._vertexNormals[r][s+2])),o.push(...c)}return new Float32Array(o)}),this._bufferData)}get layouts(){let t=0,r=0;const o=[{shaderLocation:t,offset:0,format:"float32x3"}];return t+=1,r+=3*Q,this._vertexColors.length>0&&(o.push({shaderLocation:t,offset:r,format:"float32x4"}),t+=1,r+=4*Q),this._vertexTextureCoords.length>0&&(o.push({shaderLocation:t,offset:r,format:"float32x2"}),t+=1,r+=2*Q),this._vertexNormals.length>0&&(o.push({shaderLocation:t,offset:r,format:"float32x3"}),t+=1,r+=3*Q),o}get buffers(){return this._buffers}get bufferLayout(){if(this._bufferLayout===null)throw new Error("TriangleData: Buffer layout is not available! - Did you call buildGpuBuffer() ?");return this._bufferLayout}buildGpuBuffer(t){this._buffers=this.getBufferData().map(r=>Ve(t.device,r)),this._bufferLayout={arrayStride:this.vertexByteSize,attributes:this.layouts}}addColors(t){this._vertexColors.length===0&&(this._vertexByteSize+=4*4),this._vertexColors.push(t)}addNormals(t){var r;this._vertexNormals.length===0&&(this._vertexByteSize+=3*4),(r=this._vertexNormals)==null||r.push(t)}addTextures(t){this._vertexTextureCoords.length===0&&(this._vertexByteSize+=2*4),this._vertexTextureCoords.push(t)}}const et=(e,t,r)=>{const{w:o,h:i}=t,n=o/2,s=i/2,a=e.origin,c=[],l=[],u=V.fromValues(0,0,1);c.push(_.fromValues(a.x-n,a.y-s,0)),c.push(_.fromValues(a.x+n,a.y-s,0)),c.push(_.fromValues(a.x-n,a.y+s,0)),c.push(_.fromValues(a.x-n,a.y+s,0)),c.push(_.fromValues(a.x+n,a.y-s,0)),c.push(_.fromValues(a.x+n,a.y+s,0)),l.push(u,u,u,u,u,u);const h=[],{pos:d,size:m}=r,{w:v,h:f}=m,p=v/2,M=f/2;h.push({u:d.u+p,v:d.v-M}),h.push({u:d.u-p,v:d.v-M}),h.push({u:d.u+p,v:d.v+M}),h.push({u:d.u+p,v:d.v+M}),h.push({u:d.u-p,v:d.v-M}),h.push({u:d.u-p,v:d.v+M});const S=c.map(g=>g.absolute(e)),y=l.map(g=>g.absolute(e));return[S,y,h]},rt=(e,t)=>[e[0].map(r=>r.map(t).triplet).flat(),e[1].map(r=>r.map(t).triplet).flat(),e[2].map(r=>[r.u,r.v]).flat()],ke=(e,t)=>{const{id:r,textureCoordinates:o}=t,i=x.rotationX(E(-90)),n=x.rotationX(E(180)),s=x.rotationX(E(90)),a=x.rotationZ(E(-90)).rotationY(E(90)),c=x.rotationZ(E(90)).rotationY(E(-90)),l=Mt.from2Vectors(_.fromValues(0,0,.5),V.fromValues(0,0,1),V.fromValues(1,0,0)),u=l.map(n),h=l.map(i),d=l.map(s),m=l.map(a),v=l.map(c),f={w:.25,h:.25},p=et(l,{w:1,h:1},{pos:{u:.25+.25/2,v:.25/2},size:f}),M=et(u,{w:1,h:1},{pos:{u:.25+.25/2,v:.5+.25/2},size:f}),S=et(h,{w:1,h:1},{pos:{u:.25+.25/2,v:.25+.25/2},size:f}),y=et(d,{w:1,h:1},{pos:{u:.75+.25/2,v:.25+.25/2},size:f}),g=et(m,{w:1,h:1},{pos:{u:0+.25/2,v:.25+.25/2},size:f}),w=et(v,{w:1,h:1},{pos:{u:.5+.25/2,v:.25+.25/2},size:f}),[b,F,q]=rt(p,e),R=rt(M,e),N=rt(S,e),O=rt(y,e),Z=rt(g,e),k=rt(w,e);b.push(...R[0],...N[0],...O[0],...Z[0],...k[0]),F.push(...R[1],...N[1],...O[1],...Z[1],...k[1]),q.push(...R[2],...N[2],...O[2],...Z[2],...k[2]);const C=new dt(r,"triangle-list",t);return C.addVertices(new Float32Array(b)),C.addNormals(new Float32Array(F)),o&&C.addTextures(new Float32Array(q)),C},He=()=>ke,zt=(e,t,r)=>{const o=V.fromValues(0,0,1),i=V.fromValues(0,0,-1),n=[],s=[],a=r==="up"?0:Math.PI*2,c=r==="up"?Math.PI/e:-Math.PI/e,l=r==="up"?u=>u<Math.PI*2:u=>u>0;for(let u=a;l(u);u+=c){const h=_.fromValues(0,0,t),d=_.fromValues(.5*Math.cos(u),.5*Math.sin(u),t),m=_.fromValues(.5*Math.cos(u+c),.5*Math.sin(u+c),t);s.push(h),s.push(d),s.push(m),r==="up"?n.push(o,o,o):n.push(i,i,i)}return[s,n]},qe=(e,t,r)=>{const o=[],i=[],n=Math.PI/e,s=_.fromValues(0,0,t),a=_.fromValues(0,0,r);for(let c=0;c<Math.PI*2;c+=n){const l=_.fromValues(.5*Math.cos(c),.5*Math.sin(c),t),u=V.fromPoints(l,s);o.push(l),i.push(u);const h=_.fromValues(.5*Math.cos(c+n),.5*Math.sin(c+n),t),d=V.fromPoints(h,s);o.push(h),i.push(d);const m=_.fromValues(.5*Math.cos(c),.5*Math.sin(c),r),v=V.fromPoints(m,a);o.push(m),i.push(v);const f=_.fromValues(.5*Math.cos(c),.5*Math.sin(c),r),p=V.fromPoints(f,a);o.push(f),i.push(p);const M=_.fromValues(.5*Math.cos(c+n),.5*Math.sin(c+n),t),S=V.fromPoints(M,s);o.push(M),i.push(S);const y=_.fromValues(.5*Math.cos(c+n),.5*Math.sin(c+n),r),g=V.fromPoints(y,a);o.push(y),i.push(g)}return[o,i]},$e=(e,t)=>{const{steps:r,id:o,textureCoordinates:i}=t,n=[],s=[],a=[],[c,l]=zt(r,.5,"up"),[u,h]=zt(r,-.5,"down"),[d,m]=qe(r,-.5,.5);if(n.push(...c.map(f=>f.map(e))),n.push(...u.map(f=>f.map(e))),n.push(...d.map(f=>f.map(e))),i){let f=0,p=0;const M=c.map(g=>[g.x+.5,g.y+.5]),S=u.map(g=>[g.x+.5,g.y+.5]),y=d.map(g=>{const w=g.z+.5;let b=(Math.atan2(g.y,g.x)+Math.PI)/(2*Math.PI);return b<Math.min(f,p)&&(b+=1),p=f,f=b,[b,w]});a.push(...M),a.push(...S),a.push(...y)}s.push(...l.map(f=>f.map(e))),s.push(...h.map(f=>f.map(e))),s.push(...m.map(f=>f.map(e)));const v=new dt(o,"triangle-list",t);return v.addVertices(new Float32Array(n.map(f=>f.triplet).flat())),v.addNormals(new Float32Array(s.map(f=>f.triplet).flat())),i&&v.addTextures(new Float32Array(a.flat())),v},Ye=()=>$e,B=.5257311121191336,D=.8506508083520399,je=[V.fromValues(-B,0,D),V.fromValues(B,0,D),V.fromValues(-B,0,-D),V.fromValues(B,0,-D),V.fromValues(0,D,B),V.fromValues(0,D,-B),V.fromValues(0,-D,B),V.fromValues(0,-D,-B),V.fromValues(D,B,0),V.fromValues(-D,B,0),V.fromValues(D,-B,0),V.fromValues(-D,-B,0)],Xe=[[0,4,1],[0,9,4],[9,5,4],[4,5,8],[4,8,1],[8,10,1],[8,3,10],[5,3,8],[5,2,3],[2,7,3],[7,10,3],[7,6,10],[7,11,6],[11,0,6],[0,1,6],[6,1,10],[9,0,11],[9,11,2],[9,2,5],[7,2,11]];function We(e,t){return V.fromVector(e.add(t))}function Ht(e,t,r=1){const o=new Map,i=[];function n(s,a){const c=s<a,l=`${c?s:a}-${c?a:s}`,u=o.get(l);if(u)return u;const h=We(L.fromValues(...e[s].triplet),L.fromValues(...e[a].triplet));e.push(h);const d=e.length-1;return o.set(l,d),d}for(const[s,a,c]of t){const l=n(s,a),u=n(s,c),h=n(a,c);i.push([s,l,u]),i.push([a,h,l]),i.push([c,u,h]),i.push([l,h,u])}return r===1?[e,i]:Ht(e,i,r-1)}const pt=e=>{let t=Math.asin(e.z);return[(Math.atan2(e.y,e.x)+Math.PI)/(2*Math.PI),.5-t/Math.PI]},Ke=(e,t)=>{const{steps:r,id:o,textureCoordinates:i}=t,[n,s]=Ht(je,Xe,r),a=[],c=[],l=[],u=_.fromValues(0,0,0);s.forEach(d=>{const m=_.fromVector(n[d[2]]),v=_.fromVector(n[d[1]]),f=_.fromVector(n[d[0]]),p=V.fromVector(L.fromPoints(m,u)),M=V.fromVector(L.fromPoints(v,u)),S=V.fromVector(L.fromPoints(f,u));if(a.push(...m.map(e).triplet),a.push(...v.map(e).triplet),a.push(...f.map(e).triplet),c.push(...p.triplet),c.push(...M.triplet),c.push(...S.triplet),i){const y=pt(p),g=pt(M),w=pt(S),b=Math.min(y[0],g[0],w[0]),F=Math.max(y[0],g[0],w[0]);Math.abs(F-b)>.8&&(y[0]<.4&&g[0]<.4?w[0]-=1:y[0]<.4&&w[0]<.4?g[0]-=1:g[0]<.4&&w[0]<.4?y[0]-=1:y[0]>.6&&g[0]>.6?w[0]+=1:y[0]>.6&&w[0]>.6?g[0]+=1:g[0]>.6&&w[0]>.6&&(y[0]+=1)),l.push(...y),l.push(...g),l.push(...w)}});const h=new dt(o,"triangle-list",t);return h.addVertices(new Float32Array(a)),h.addNormals(new Float32Array(c)),i&&h.addTextures(new Float32Array(l)),h},Gt=()=>Ke,Qe=(e,t)=>{var r,o,i;const{id:n}=t,s=e.scaleVector,a=Math.min(s.x,s.y),c=Math.log10(a),l=1-(c-Math.floor(c)),u=Math.min(1,l*1.5),h=(r=t.colors)!=null&&r[0]?t.colors[0][3]/2:l*.5,d=Math.floor(c)-2,m=Math.floor(c)-1,v=Math.floor(c),f=Math.pow(10,Math.round(m)),p=Math.pow(10,Math.round(v))/2,M=Math.pow(10,Math.round(d));console.log("prev tileDim",M,"with alpha",h),console.log("main tileDim",f,"with alpha",l),console.log("next tileDim",p,"with alpha",u);const S=mt(s,f,e),y=mt(s,p,e),g=mt(s,M,e),w=new dt(n,"line-list",t);if(t.showAxes){const b=[],F=_.fromValues(-.5,0,0).map(e),q=_.fromValues(.5,0,0).map(e),R=_.fromValues(0,-.5,0).map(e),N=_.fromValues(0,.5,0).map(e),O=_.fromValues(0,0,0).map(e),Z=_.fromValues(0,0,f);b.push(F,q,R,N,O,Z);const k=[[1,0,0,1],[1,0,0,1],[0,1,0,1],[0,1,0,1],[.1,.1,1,1],[.1,.1,1,1]];w.addVertices(new Float32Array(b.flatMap(C=>C.triplet))),w.addColors(new Float32Array(k.flat()))}return w.addVertices(new Float32Array(y.flatMap(b=>b.triplet))),w.addColors(new Float32Array(vt(y,u))),w.addVertices(new Float32Array(S.flatMap(b=>b.triplet))),w.addColors(new Float32Array(vt(S,l,(o=t.colors)==null?void 0:o[0]))),w.addVertices(new Float32Array(g.flatMap(b=>b.triplet))),w.addColors(new Float32Array(vt(g,h,(i=t.colors)==null?void 0:i[0]))),w},Je=()=>Qe,mt=(e,t,r)=>{const o=e.x/t,i=e.y/t,n=1/o,s=1/i,a=[];for(let c=0;c<o/2;c++){const l=_.fromValues(-n*c,-.5,0).map(r),u=_.fromValues(-n*c,.5,0).map(r);if(a.push(l,u),n*(c+1)<.5){const h=_.fromValues(n*(c+1),-.5,0).map(r),d=_.fromValues(n*(c+1),.5,0).map(r);a.push(h,d)}}for(let c=0;c<i/2;c++){const l=_.fromValues(-.5,-s*c,0).map(r),u=_.fromValues(.5,-s*c,0).map(r);if(a.push(l,u),s*(c+1)<.5){const h=_.fromValues(-.5,s*(c+1),0).map(r),d=_.fromValues(.5,s*(c+1),0).map(r);a.push(h,d)}}return a};function vt(e,t,r){return e.flatMap(()=>r?[r[0],r[1],r[2],t]:[.9,.9,1,t])}const tr=(e,t=[10,10,10])=>{let r=_.fromValues(0,0,0),o=_.fromValues(...t),i=o.x===0&&o.y===0?V.fromValues(0,1,0):V.fromValues(0,0,1),n=[0,0],s=[0,0],a=0,c=0,l=Math.PI/5,u=L.fromPoints(o,r).lengthSquare,h=Mt.lookAt(o,r,i),d=!1;return[{move:(m,v,f)=>{const p=Math.min(e.canvas.width,e.canvas.height),M=Math.max(e.canvas.width,e.canvas.height);let S=Math.log(u)*Math.atan(l)/(M/2),y=l/p*2;switch(m){case"mouse-0":n=[v.direction[0]*S,v.direction[1]*S],d=!0;break;case"mouse-1":s=[-v.direction[0]*y,v.direction[1]*y];break;case"mouse-2":l+=v.direction[1]*y;break;case"none":d=!1;break}},zoom:m=>{const v=Math.log10(u+1)/(1e3*Math.atan(l));a=m*v},tilt:m=>{c=m*5e-4,d=!1}},{view:m=>{if(!m||m!=null&&m.isIdentity)return x.lookAt(o,r,i);const v=L.fromPoints(o,r).scale(1-a);v.length>2&&v.length<500&&(o=r.add(v));const f=L.fromPoints(r,o),p=x.move(f).apply(h),M=[Math.tan(s[0])*u,Math.tan(s[1])*u],S=L.fromValues(M[0],M[1],0).absolute(p),y=p.relative(o);let g=p.relative(i);g=x.rotationZ(c).apply(g);const w=x.rotationX(-n[1]).compose(x.rotationY(-n[0]));o=w.apply(y).absolute(p),i=w.apply(g).absolute(p);const b=x.move(S);return r=b.apply(r),o=b.apply(o),h=Mt.lookAt(o,r,i),d||(n=[n[0]*.95,n[1]*.95],c*=.9,a*=.9,Math.abs(n[0])<.001&&Math.abs(n[1])<.001&&Math.abs(c)<.001&&Math.abs(a)<.001&&(n=[0,0],c=0,a=0)),s=[0,0],u=L.fromPoints(o,r).length,h.toTransform()},projection:m=>{const v=e.canvas.width/e.canvas.height,f=L.fromPoints(o,r).length,p=Math.max(400,f*.8);return x.perspective(l,v,Math.max(.01,f-p),f+p)}}]},er=e=>{const t=-E(9),r=_.fromValues(10,0,-1.5),o=_.fromValues(-12,0,-3);e.setAmbientLight([0,0,0,1]);const i=V.fromVector(_.origin().subtract(r));return e.setLight("directional",0,{dir:i,col:[.6,.6,.6,1]}),e.setLight("directional",1,{dir:i,col:[.6,.6,.6,0]}),e.setLight("point",0,{pos:r,col:[.8,.8,.8,1]}),e.setLight("point",1,{pos:o,col:[.2,.2,.5,1]}),e.setLight("point",2,{pos:o,col:[.1,.1,.4,0]}),e.setLight("point",3,{pos:o,col:[.1,.1,.4,0]}),{dirLights:(n,s)=>{const a=n/1e3,c=x.rotationZ(t*a);s[0].dir=s[0].dir.map(c)},posLights:(n,s)=>{const a=n/1e3,c=x.rotationZ(t*a),l=x.rotationZ(t*a*1.2);s[0].pos=s[0].pos.map(c),s[1].pos=s[1].pos.map(l)}}};let X=0,At=0;const rr=e=>({"earth-clouds":t=>{const r=-t/1e3;return At+=r*E(360/240),{rotation:P.rotationZ(At)}},"earth-sphere":t=>{const r=-t/1e3;return X+=r*E(360/180),{rotation:P.rotationZ(X)}},cylinder:t=>{const r=t/1e3;return X+=r*E(360/20),{rotation:P.rotationZ(X).compose(P.rotationY(X))}},cube:t=>{const r=t/1e3;return X+=r*E(360/10),{rotation:P.rotationZ(X).compose(P.rotationY(X)).compose(P.rotationZ(X))}}}),or=(e,t)=>{const r=Gt()(x.scale(2.5,2.5,2.5),{id:"earth-sphere",steps:4,colors:[[.5,.5,.5,1]],textureCoordinates:!0});r.setMaterial(e);const o=Gt()(x.scale(2.502,2.502,2.502),{id:"earth-clouds",steps:4,colors:[[.5,.5,.5,1]],textureCoordinates:!0});return o.setMaterial(t),[r,o]},ir=e=>{const t=Ye()(x.scale(2,2,2),{id:"cylinder",steps:24,colors:[[1,0,0,1]],textureCoordinates:!0});return t.setMaterial(e),[t]},nr=e=>{const t=He()(x.scale(2,2,2),{id:"cube",textureCoordinates:!0});return t.setMaterial(e),[t]},qt=()=>[Je()(x.scale(50,50,1).translation(0,0,0),{id:"ref-plane",colors:[[.2,.2,.3,.4]]})];async function sr(e,t){const r=await Ue(e);await r.setupShaders("standard-3d");const[o,i]=tr(r,[6,6,4]);r.captureMouseMotion(o);const n=er(r),s=rr();r.beginRenderLoop({camera:i,lights:n,models:s});const a=await qt();return r.setScene(a),r}const nt=[];let $t=!1;const ar=(e,t)=>()=>{console.log("setWireframe",t.checked),t.checked?e.setPipelineMode("alternative"):e.setPipelineMode("default")},cr=e=>()=>{console.log("setGrid",e.checked),$t=e.checked},gt=(e,t)=>()=>{e.clearScene();const r=$t?qt():[];switch(t){case"globe":const o=or(nt[0],nt[3]);e.setScene([...o,...r]);break;case"cylinder":const i=ir(nt[1]);e.setScene([...i,...r]);break;case"cube":const n=nr(nt[2]);e.setScene([...r,...n]);break}},_t=document.getElementById("support"),It=document.getElementById("gfx-canvas");!_t||!It?alert("The app is broken! No canvas was found!"):sr(It).then(e=>Ze(e,["earth.jpg","metal2.jpg","dice.png","clouds-2k.png"])).then(([e,t])=>{nt.push(...t);const r=document.getElementById("wireframe");r.onclick=ar(e,r);const o=document.getElementById("grid");o.onclick=cr(o);const i=document.getElementById("geo-globe"),n=document.getElementById("geo-cylinder"),s=document.getElementById("geo-cube");i.onclick=gt(e,"globe"),n.onclick=gt(e,"cylinder"),s.onclick=gt(e,"cube"),i.click(),_t.innerText="All set!"}).catch(e=>{_t.innerText="Error: "+e.message});
